Reflection
In this workshop, what I learnt was the use of vector and list. On top of that, I did practice a lot of lambda functions, inheritance, polymorphism, and dealing with string input by using tools from <string> library. One of the biggest problems was dealing with the string input. I had to take tag name out and compare to choose the correct Car or Racecar. Then I had to trim the string to get correct input. Second problem was the syntax of the throw exception. However, I looked back at the note in ICT website and figured it out. 
We need to deallocate the dynamically allocated memory in the vector because when we use push_back function of the vector, it will create a dynamic array. The vector does not destroy those dynamic allocations itself, so we have to call the destructor of the vector. The loadData() detect the unknown type of vehicle and invalid data by using try and catch() or error handling method. Another solution is using if statement to filter.
The reason we use type sdds::Vehicle* instead of sdds::Vehicle because what we will actually do is to add the address of the object to the dynamic array in the vector. So when we iterate it, we display the value by using *i. Also in the supplied cpp file, we declare a type Vehicle*: 
sdds::Vehicle* aVehicle = sdds::createInstance(file);
